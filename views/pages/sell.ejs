<%-layout("/layouts/boilerplate.ejs")%>

<body>
  <!-- Sell Product Section -->
  <section class="sell-product-section">
    <div class="seller-header">
      <h1>Sell Your Products With Us</h1>
      <p class="subtitle">Reach thousands of potential buyers with our marketplace</p>
      <div class="progress-steps">
        <div class="step active" id="product-details-step">1. Product Details</div>
        <div class="step" id="pricing-step">2. Pricing</div>
        <div class="step" id="address-step">3. Confirm Address</div>
        <div class="step" id="review-step">4. Review</div>
      </div>
    </div>

    <!-- Product Details Form (Initially visible) -->
    <form action="/sell" method="POST" id="sellForm" enctype="multipart/form-data">
      <div id="product-details-form" class="sell-form">
      <div class="form-columns">
        <!-- Left Column -->
        <div class="form-left">
          <!-- Product Name -->
          <div class="form-group">
            <label for="product-name">Product Title*</label>
            <input type="text" id="product-name" name="details[title]" placeholder="e.g., Apple MacBook Pro 14-inch M1 Pro Chip" required />
            <p class="hint">Be specific and include key details</p>
          </div>

          <!-- Product Category -->
          <div class="form-group">
            <label for="product-category">Category*</label>
            <select id="product-category" name="details[category]" required>
              <option value="">Select a category</option>
              <option value="electronics">Electronics</option>
              <option value="fashion">Fashion</option>
              <option value="home">Home & Garden</option>
              <option value="sports">Sports & Outdoors</option>
              <option value="vehicles">Vehicles</option>
              <option value="collectibles">Collectibles</option>
              <option value="other">Other</option>
            </select>
            <input type="text" id="other-category" name="details[otherCategory]" placeholder="Specify other category" style="display: none; margin-top: 10px;" />
            <script>
              document.getElementById('product-category').addEventListener('change', function() {
                const otherCategoryInput = document.getElementById('other-category');
                if (this.value === 'other') {
                  otherCategoryInput.style.display = 'block';
                } else {
                  otherCategoryInput.style.display = 'none';
                }
              });
            </script>
          </div>

          <!-- Product Condition -->
          <div class="form-group">
            <label>Condition*</label>
            <div class="condition-options">
              <label class="condition-option">
                <input type="radio" name="details[condition]" value="new" checked required>
                <span>New</span>
              </label>
              <label class="condition-option">
                <input type="radio" name="details[condition]" value="used" required>
                <span>Used - Like New</span>
              </label>
              <label class="condition-option">
                <input type="radio" name="details[condition]" value="good" required>
                <span>Used - Good</span>
              </label>
              <label class="condition-option">
                <input type="radio" name="details[condition]" value="fair" required>
                <span>Used - Fair</span>
              </label>
            </div>
          </div>

          <!-- Product Description -->
          <div class="form-group">
            <label for="product-description">Detailed Description*</label>
            <div id="description-points-container">
              <div class="description-point">
                <input type="text" name="details[description][]" placeholder="Enter a key detail about your product..." required />
              </div>
            </div>
            <button type="button" id="add-description-point-btn" class="add-more-btn">Add More Points</button>
            <p class="hint">Mention features, specifications, dimensions, and any flaws</p>
          </div>

          <script>
            document.getElementById('add-description-point-btn').addEventListener('click', function() {
              const container = document.getElementById('description-points-container');
              const newPoint = document.createElement('div');
              newPoint.className = 'description-point';
              newPoint.innerHTML = `<input type="text" name="details[description][]" placeholder="Enter a key detail about your product..." required />`;
              container.appendChild(newPoint);
            });
          </script>
        </div>

        <!-- Right Column -->
        <div class="form-right">
          <!-- Product Images -->
          <div class="form-group">
            <label>Product Images* </label>
            <div class="image-upload-container">
              <div class="upload-area" id="drop-area">
                <div class="upload-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="#4f46e5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="17 8 12 3 7 8"></polyline>
                    <line x1="12" y1="3" x2="12" y2="15"></line>
                  </svg>
                </div>
                <p class="upload-text">Drag & drop images here or click to browse</p>
                <input type="file" id="product-images" name="images" multiple accept="image/*" required hidden />
                <button type="button" class="browse-btn">Select Images</button>
              </div>
              <div class="preview-container" id="preview-container">
                <!-- Preview images will appear here -->
              </div>
            </div>
            <p class="hint">First image will be used as the cover photo</p>
          </div>

          <!-- Product Features -->
          <div class="form-group">
            <label for="feature-options">Product Features</label>
            <div id="feature-options-container">
              <div class="feature-option">
                <select name="details[features][][featureType]" class="feature-type">
                  <option value="color">Color</option>
                  <option value="brand">Brand</option>
                  <option value="material">Material</option>
                  <option value="size">Size</option>
                  <option value="weight">Weight</option>
                  <option value="freeShipping">Free Shipping</option>
                  <option value="localPickup">Local Pickup</option>
                  <option value="other">Other</option>
                </select>
                <input type="text" name="details[features][][featureValue]" placeholder="Enter value (e.g., Red, Nike, Cotton)" />
              </div>
            </div>
            <button type="button" id="add-feature-btn" class="add-more-btn">Add More Features</button>
          </div>
          <script>
            document.getElementById('add-feature-btn').addEventListener('click', function() {
              const container = document.getElementById('feature-options-container');
              const newFeature = document.createElement('div');
              newFeature.className = 'feature-option';
              newFeature.innerHTML = `
                <select name="details[features][][featureType]" class="feature-type">
                  <option value="color">Color</option>
                  <option value="brand">Brand</option>
                  <option value="material">Material</option>
                  <option value="size">Size</option>
                  <option value="weight">Weight</option>
                  <option value="freeShipping">Free Shipping</option>
                  <option value="localPickup">Local Pickup</option>
                  <option value="other">Other</option>
                </select>
                <input type="text" name="details[features][][featureValue]" placeholder="Enter value (e.g., Red, Nike, Cotton)" />
              `;
              container.appendChild(newFeature);
            });
          </script>
        </div>
      </div>

      <!-- Form Footer -->
      <div class="form-footer">
        <button type="button" id="continue-to-pricing" class="submit-btn">
          <span>Continue to Pricing</span>
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M5 12h14M12 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>

      <!-- Move the terms paragraph here -->
    </div>
    <!-- Pricing Form (Initially hidden) -->
    <div class="sell-form" id="pricing-form" style="display: none;">
      <div class="form-columns">
        <div class="form-left">
          <div class="form-group">
            <label for="base-price">Base Price*</label>
            <div class="price-input">
              <input type="number" id="base-price" name="pricing[basePrice]" placeholder="35999" min="0" step="1" required />
            </div>
          </div>

          <div class="form-group">
            <label for="discount-price">Discount Price (optional)</label>
            <div class="price-input">
              <input type="number" id="discount-price" name="pricing[discountPrice]" placeholder="29999" min="0" step="1" />
            </div>
          </div>

          <div class="form-group">
            <label for="tax-rate">Tax Rate (%)</label>
            <input type="number" id="tax-rate" name="pricing[taxRate]" placeholder="18" min="0" max="100" step="0.1" />
          </div>
        </div>

        <div class="form-right">
          <div class="form-group">
            <label>Shipping Options</label>
            <div class="shipping-options">
              <label class="shipping-option">
                <input type="checkbox" name="pricing[shippingOption][freeShipping]" value="true">
                <span>Offer free shipping</span>
              </label>
              <label class="shipping-option">
                <input type="checkbox" name="pricing[shippingOption][localPickup]" value="true" checked>
                <span>Allow local pickup</span>
              </label>
            </div>
          </div>

          <div class="form-group">
            <label for="shipping-cost">Shipping Cost (if not free)</label>
            <div class="price-input">
              <input type="number" id="shipping-cost" name="pricing[shippingCost]" placeholder="99" min="0" step="1" />
            </div>
          </div>

          <div class="form-group">
            <label for="return-policy">Return Policy</label>
            <select id="return-policy" name="pricing[returnPolicy]">
              <option value="30-days">30 days return</option>
              <option value="14-days">14 days return</option>
              <option value="7-days">7 days return</option>
              <option value="no-returns">No returns</option>
            </select>
          </div>
        </div>
      </div>

      <div class="form-footer">
        <button type="button" id="back-to-details" class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M19 12H5M12 19l-7-7 7-7"></path>
          </svg>
          <span>Back to Details</span>
        </button>
        <button type="button" id="continue-to-address" class="submit-btn">
          <span>Continue to Address</span>
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M5 12h14M12 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>

      <!-- Terms Paragraph -->
    </div>

    <!-- Address Form (Initially hidden) -->
    <div class="sell-form" id="address-form" style="display: none;">
      <div class="form-columns">
        <div class="form-left">
          <div class="form-group">
            <label for="address-alias">Select Address</label>
            <select id="address-alias" name="address[alias]">
              <option value="">Select from saved addresses</option>
              <option value="home">Home</option>
              <option value="work">Work</option>  
              <option value="other">Other</option>
            </select>
          </div>

          <div class="form-group" id="other-address-group" style="display: none;">
            <label for="other-address">Specify Address Alias</label>
            <input type="text" id="other-address" name="address[otherAlias]" placeholder="Enter address alias (e.g., Vacation Home)" />
          </div>

        <script>
          document.getElementById('address-alias').addEventListener('change', function () {
            const otherAddressGroup = document.getElementById('other-address-group');
            if (this.value === 'other') {
              otherAddressGroup.style.display = 'block';
            } else {
              otherAddressGroup.style.display = 'none';
            }
          });
        </script>

          <div class="form-group">
            <label for="street-address">Street Address*</label>
            <input type="text" id="street-address" name="address[street]" placeholder="123 Main St" required />
          </div>

          <div class="form-group">
            <label for="city">City*</label>
            <input type="text" id="city" name="address[city]" placeholder="Mumbai" required />
          </div>
        </div>

        <div class="form-right">
          <div class="form-group">
            <label for="state">State*</label>
            <input type="text" id="state" name="address[state]" placeholder="Maharashtra" required />
          </div>

          <div class="form-group">
            <label for="zip-code">ZIP Code*</label>
            <input type="text" id="zip-code" name="address[zipCode]" placeholder="400001" required />
          </div>

          <div class="form-group">
            <label for="country">Country*</label>
            <input type="text" id="country" name="address[country]" placeholder="India" required />
          </div>
        </div>
      </div>

      <div class="form-footer">
        <button type="button" id="back-to-pricing" class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M19 12H5M12 19l-7-7 7-7"></path>
          </svg>
          <span>Back to Pricing</span>
        </button>
        <button type="button" id="continue-to-review" class="submit-btn">
          <span>Continue to Review</span>
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M5 12h14M12 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>

      <!-- Terms Paragraph -->
    </div>

    <!-- Review Form (Initially hidden) -->
    <div class="sell-form" id="review-form" style="display: none;">
      <div class="review-container">
        <h2>Review Your Listing</h2>
        <div class="review-section">
          <h3>Product Details</h3>
          <div id="review-product-details"></div>
        </div>
        
        <div class="review-section">
          <h3>Pricing</h3>
          <div id="review-pricing"></div>
        </div>
        
        <div class="review-section">
          <h3>Shipping From</h3>
          <div id="review-address"></div>
        </div>
      </div>

      <div class="form-footer">
        <button type="button" id="back-to-address" class="back-btn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M19 12H5M12 19l-7-7 7-7"></path>
          </svg>
          <span>Back to Address</span>
        </button>
        <button type="submit" class="submit-btn">
          <span>Submit Listing</span>
        </button>
      </div>

      <!-- Terms Paragraph -->
    </div>
    <p class="terms">By listing your item, you agree to our <a href="/sellerterms">Seller Terms</a> and <a href="/privacy">Privacy Policy</a></p>
  </form>
  </section>

  <style>
    :root {
      --primary-color: #4f46e5;
      --primary-hover: #4338ca;
      --secondary-color: #f3f4f6;
      --text-color: #374151;
      --light-text: #6b7280;
      --border-color: #d1d5db;
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --error-color: #ef4444;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background-color: #f9fafb;
      color: var(--text-color);
      line-height: 1.6;
    }

    .sell-product-section {
      max-width: 1000px;
      margin: 30px auto;
      padding: 40px;
      background-color: #ffffff;
      border-radius: 16px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
    }

    .seller-header {
      text-align: center;
      margin-bottom: 40px;
    }

    .seller-header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      color: var(--primary-color);
      margin-bottom: 10px;
      background: linear-gradient(90deg, #4f46e5, #8b5cf6);
      -webkit-background-clip: text;
      background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .subtitle {
      font-size: 1.1rem;
      color: var(--light-text);
      margin-bottom: 30px;
    }

    .progress-steps {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
      max-width: 800px;
      margin-left: auto;
      margin-right: auto;
    }

    .step {
      padding: 8px 15px;
      border-radius: 20px;
      background-color: var(--secondary-color);
      color: var(--light-text);
      font-weight: 500;
      font-size: 0.9rem;
      white-space: nowrap;
      flex: 1;
      margin: 0 2px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .step.active {
      background-color: var(--primary-color);
      color: white;
    }

    .sell-form {
      margin-top: 30px;
    }

    .form-columns {
      display: flex;
      gap: 30px;
    }

    .form-left {
      flex: 1;
    }

    .form-right {
      flex: 1;
    }

    .form-group {
      margin-bottom: 25px;
    }

    .form-group label {
      display: block;
      font-weight: 600;
      margin-bottom: 8px;
      color: var(--text-color);
    }

    .form-group input[type="text"],
    .form-group input[type="number"],
    .form-group textarea,
    .form-group select {
      width: 100%;
      padding: 12px 15px;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      font-size: 1rem;
      color: var(--text-color);
      transition: all 0.2s ease;
    }

    .form-group select {
      appearance: none;
      background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 10px center;
      background-size: 1em;
    }

    .form-group input:focus,
    .form-group textarea:focus,
    .form-group select:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
    }

    .hint {
      font-size: 0.85rem;
      color: var(--light-text);
      margin-top: 5px;
    }

    /* Condition Options */
    .condition-options {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
    }

    .condition-option {
      display: flex;
      align-items: center;
      padding: 8px 12px;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .condition-option input {
      margin-right: 8px;
    }

    .condition-option:hover {
      border-color: var(--primary-color);
    }

    /* Price Group */
    .price-group {
      position: relative;
    }

    .price-input {
      position: relative;
      display: flex;
      align-items: center;
    }

    .price-input .currency {
      position: absolute;
      left: 15px;
      font-weight: 600;
      color: var(--text-color);
    }

    .price-input input {
      padding-left: 35px;
    }

    .price-suggestions {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-top: 10px;
      flex-wrap: wrap;
    }

    .price-suggestions span {
      font-size: 0.9rem;
      color: var(--light-text);
    }

    .suggestion-btn {
      padding: 4px 10px;
      background-color: var(--secondary-color);
      border: none;
      border-radius: 4px;
      font-size: 0.85rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .suggestion-btn:hover {
      background-color: var(--border-color);
    }

    /* Image Upload */
    .image-upload-container {
      margin-top: 10px;
    }

    .upload-area {
      border: 2px dashed var(--border-color);
      border-radius: 8px;
      padding: 30px;
      text-align: center;
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
    }

    .upload-area:hover {
      border-color: var(--primary-color);
    }

    .upload-area.highlight {
      border-color: var(--primary-color);
      background-color: rgba(79, 70, 229, 0.05);
    }

    .upload-icon {
      margin-bottom: 15px;
    }

    .upload-text {
      font-size: 1rem;
      color: var(--light-text);
      margin-bottom: 15px;
    }

    .browse-btn {
      padding: 8px 20px;
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 6px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .browse-btn:hover {
      background-color: var(--primary-hover);
    }

    /* Preview Container */
    .preview-container {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 15px;
    }

    .preview-item {
      position: relative;
      width: 80px;
      height: 80px;
      border-radius: 6px;
      overflow: hidden;
    }

    .preview-item img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .preview-item .remove-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      width: 20px;
      height: 20px;
      background-color: rgba(0, 0, 0, 0.6);
      color: white;
      border: none;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      font-size: 10px;
    }

    /* Shipping Options */
    .shipping-options {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .shipping-option {
      display: flex;
      align-items: center;
    }

    .shipping-option input {
      margin-right: 10px;
    }

    /* Form Footer */
    .form-footer {
        display: flex;
      justify-content: flex-end; /* Align the button to the right */
      margin-top: 20px;
    }

    .submit-btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 12px 30px;
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      box-shadow: 0 4px 6px rgba(79, 70, 229, 0.2);
    }

    .submit-btn:hover {
      background-color: var(--primary-hover);
      transform: translateY(-2px);
      box-shadow: 0 6px 8px rgba(79, 70, 229, 0.3);
    }

    .submit-btn svg {
      margin-left: 8px;
    }

    .back-btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 12px 20px;
      background-color: var(--secondary-color);
      color: var(--text-color);
      border: none;
      border-radius: 8px;
      font-size: 1rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .back-btn:hover {
      background-color: var(--border-color);
    }

    .back-btn svg {
      margin-right: 8px;
    }

    .terms {
      text-align: center; /* Center the paragraph */
      margin-top: 20px; /* Add spacing between the form and the paragraph */
      font-size: 0.85rem;
      color: var(--light-text);
    }

    .terms a {
      color: var(--primary-color);
      text-decoration: none;
    }

    .terms a:hover {
      text-decoration: underline;
    }

    /* Add More Button */
    .add-more-btn {
      margin-top: 10px;
      padding: 8px 15px;
      background-color: var(--primary-color);
      color: white;
      border: none;
      border-radius: 6px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .add-more-btn:hover {
      background-color: var(--primary-hover);
    }

    /* Product Features */
    .feature-option {
      display: flex;
      gap: 10px;
      margin-bottom: 10px;
    }

    .feature-option select {
      flex: 1;
    }

    .feature-option input {
      flex: 2;
    }

    /* Review Section */
    .review-container {
      padding: 20px;
    }

    .review-container h2 {
      font-size: 1.8rem;
      margin-bottom: 30px;
      color: var(--primary-color);
      text-align: center;
    }

    .review-section {
      margin-bottom: 30px;
      padding: 20px;
      border: 1px solid var(--border-color);
      border-radius: 8px;
    }

    .review-section h3 {
      font-size: 1.3rem;
      margin-bottom: 15px;
      color: var(--text-color);
    }

    .review-detail {
      display: flex;
      margin-bottom: 10px;
    }

    .review-label {
      font-weight: 600;
      width: 150px;
      color: var(--light-text);
    }

    .review-value {
      flex: 1;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .form-columns {
        flex-direction: column;
      }

      .sell-product-section {
        padding: 25px;
      }

      .seller-header h1 {
        font-size: 2rem;
      }

      .progress-steps {
        flex-wrap: wrap;
      }
      
      .step {
        flex: 0 0 48%;
        margin-bottom: 5px;
      }

      .form-footer {
        flex-direction: column;
        gap: 15px;
      }

      .back-btn, .submit-btn {
        width: 100%;
      }
    }

    @media (max-width: 480px) {
      .step {
        font-size: 0.7rem;
        padding: 6px 8px;
      }

      .feature-option {
        flex-direction: column;
        gap: 5px;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Form navigation
      const productDetailsForm = document.getElementById('product-details-form');
      const pricingForm = document.getElementById('pricing-form');
      const addressForm = document.getElementById('address-form');
      const reviewForm = document.getElementById('review-form');
      const sellForm=document.getElementById("sellForm")

      // Progress steps
      const productDetailsStep = document.getElementById('product-details-step');
      const pricingStep = document.getElementById('pricing-step');
      const addressStep = document.getElementById('address-step');
      const reviewStep = document.getElementById('review-step');

      // Buttons
      const continueToPricingBtn = document.getElementById('continue-to-pricing');
      const backToDetailsBtn = document.getElementById('back-to-details');
      const continueToAddressBtn = document.getElementById('continue-to-address');
      const backToPricingBtn = document.getElementById('back-to-pricing');
      const continueToReviewBtn = document.getElementById('continue-to-review');
      const backToAddressBtn = document.getElementById('back-to-address');
      const submitBtn = document.querySelector('.submit-btn[type="submit"]');


      submitBtn.addEventListener('click', function (event) {
        event.preventDefault(); // Prevent form submission for validation
        if (validateProductDetails() && validatePricing() && validateAddress()) {
          sellForm.submit(); // Submit the form if all validations pass
          alert('Form submitted successfully!');
          // Here you can add the code to submit the form data to the server
        }
      });
      // Step click handlers
      continueToPricingBtn.addEventListener('click', () => {
        if (validateProductDetails()) {
          highlightStep(pricingStep);
          showForm('pricing');
        }
      });

      continueToAddressBtn.addEventListener('click', () => {
        if (validatePricing()) {
          highlightStep(addressStep);
          showForm('address');
        }
      });

      continueToReviewBtn.addEventListener('click', () => {
        if (validateAddress()) {
          highlightStep(reviewStep);
          populateReview();
          showForm('review');
        }
      });

      backToDetailsBtn.addEventListener('click', () => {
        highlightStep(productDetailsStep);
        showForm('product-details');
      });

      backToPricingBtn.addEventListener('click', () => {
        highlightStep(pricingStep);
        showForm('pricing');
      });

      backToAddressBtn.addEventListener('click', () => {
        highlightStep(addressStep);
        showForm('address');
      });

      // Validation functions
      function validateProductDetails() {
        const productName = document.getElementById('product-name').value.trim();
        const productCategory = document.getElementById('product-category').value.trim();
        const productImages = document.getElementById('product-images').files;

        if (!productName || !productCategory || productImages.length === 0) {
          alert('Please fill in all required fields in Product Details.');
          return false;
        }
        return true;
      }

      function validatePricing() {
        const basePrice = document.getElementById('base-price').value.trim();

        if (!basePrice) {
          alert('Please enter the Base Price.');
          return false;
        }
        return true;
      }

      function validateAddress() {
        const addressAlias = document.getElementById('address-alias').value.trim();
        const streetAddress = document.getElementById('street-address').value.trim();
        const city = document.getElementById('city').value.trim();
        const state = document.getElementById('state').value.trim();
        const zipCode = document.getElementById('zip-code').value.trim();
        const country = document.getElementById('country').value.trim();

        if (!addressAlias || !streetAddress || !city || !state || !zipCode || !country) {
          alert('Please fill in all required fields in Address.');
          return false;
        }
        return true;
      }

      // Show the appropriate form
      function showForm(formToShow) {
        // Hide all forms
        productDetailsForm.style.display = 'none';
        pricingForm.style.display = 'none';
        addressForm.style.display = 'none';
        reviewForm.style.display = 'none';

        // Show the selected form
        switch (formToShow) {
          case 'product-details':
            productDetailsForm.style.display = 'block';
            break;
          case 'pricing':
            pricingForm.style.display = 'block';
            break;
          case 'address':
            addressForm.style.display = 'block';
            break;
          case 'review':
            reviewForm.style.display = 'block';
            break;
        }
      }

      // Highlight the current step
      function highlightStep(stepToActivate) {
        // Remove the active class from all steps
        [productDetailsStep, pricingStep, addressStep, reviewStep].forEach(step => {
          step.classList.remove('active');
        });

        // Add the active class to the current step
        stepToActivate.classList.add('active');
      }

      // Populate the review form with data
      function populateReview() {
        const reviewProductDetails = document.getElementById('review-product-details');
        const reviewPricing = document.getElementById('review-pricing');
        const reviewAddress = document.getElementById('review-address');

        // Populate Product Details
        reviewProductDetails.innerHTML = `
          <p><strong>Product Name:</strong> ${document.getElementById('product-name').value}</p>
          <p><strong>Category:</strong> ${document.getElementById('product-category').value}</p>
        `;

        // Populate Pricing
        reviewPricing.innerHTML = `
          <p><strong>Base Price:</strong> ₹${document.getElementById('base-price').value}</p>
        `;

        // Populate Address
        reviewAddress.innerHTML = `
          <p><strong>Street Address:</strong> ${document.getElementById('street-address').value}</p>
          <p><strong>City:</strong> ${document.getElementById('city').value}</p>
        `;
      }

      // Initialize with the Product Details form
      showForm('product-details');
    });

    document.addEventListener('DOMContentLoaded', function () {
      const fileInput = document.getElementById('product-images');
      const dropArea = document.getElementById('drop-area');
      const previewContainer = document.getElementById('preview-container');
      const browseBtn = document.querySelector('.browse-btn');

      // Handle drag-and-drop events
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
      });

      ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false);
      });

      ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false);
      });

      dropArea.addEventListener('drop', handleDrop, false);

      // Handle browse button click
      browseBtn.addEventListener('click', () => fileInput.click());

      // Handle file input change
      fileInput.addEventListener('change', handleFiles);

      // Prevent default behavior for drag-and-drop events
      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }

      // Handle dropped files
      function handleDrop(e) {
        const files = e.dataTransfer.files;
        handleFiles({ target: { files } });
      }

      // Handle selected files
      function handleFiles(e) {
        const files = e.target.files;
        const fileInput = document.getElementById('product-images');
        const dataTransfer = new DataTransfer();

        // Add existing files from the input
        Array.from(fileInput.files).forEach(file => dataTransfer.items.add(file));

        Array.from(files).forEach(file => {
          dataTransfer.items.add(file);
          previewFile(file);
        });

        // Update the input's files
        fileInput.files = dataTransfer.files;
      }

      // Preview the selected file
      function previewFile(file) {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onloadend = function () {
          const previewItem = document.createElement('div');
          previewItem.classList.add('preview-item');
          previewItem.innerHTML = `
            <img src="${reader.result}" alt="Preview">
            <button type="button" class="remove-btn">&times;</button>
          `;
          previewContainer.appendChild(previewItem);

          // Handle remove button click
          previewItem.querySelector('.remove-btn').addEventListener('click', () => {
            previewItem.remove();
          });
        };
      }
    });
  </script>
</body>
</html>